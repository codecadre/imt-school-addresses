{:paths ["src/" "."]
 :tasks
 {:requires ([babashka.fs :as fs]
             [babashka.process :as p :refer [process]]
             [babashka.wait :as wait])
  nrepl (let [port (with-open [sock (java.net.ServerSocket. 0)] (.getLocalPort sock))
              proc (process (str "bb nrepl-server " port) {:inherit true})]
          (wait/wait-for-port "localhost" port)
          (spit ".nrepl-port" port)
          (fs/delete-on-exit ".nrepl-port")
          (deref proc))
  :enter (println "Entering:" (:name (current-task)) " - " (:doc (current-task)) )

  hrefs {:doc "Step 1: scrapes IMT website for hrefs only"
         :task (shell "npx nbb src/hrefs.cljs")}

  schools {:doc "Step 2: scrapes IMT website for the entire school data using the hrefs"
           :task (shell "bb -m schools")}

  cleanup {:doc "Step 3: Cleans the data in the predefined sort order"
           :task (shell "bb -m cleanup")}

  file-writer {:doc "Step 4: writes to final file structure and adds :archived-last-seen-at"
               :task (shell "bb -m file-writer")}

  run-all {:doc "Do the whole thing"
           :task (do (run 'hrefs)
                     (run 'schools)
                     #_(if (seq (fs/modified-since "parsed-data/db.edn"
                                                   "schools.edn")))
                     (run 'cleanup)
                     #_(println "No new schools"))}}}
